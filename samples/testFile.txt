#include
<stdlib.h>
#include
<unistd.h>
#include
<stdio.h>
#include
<string.h>
#include
<assert.h>
struct
memory_region{
size_t
*
start;
size_t
*
end;
};
struct
memory_region
global_mem;
struct
memory_region
heap_mem;
struct
memory_region
stack_mem;
void
walk_region_and_mark(void*
start,
void*
end);
//how
many
ptrs
into
the
heap
we
have
#define
INDEX_SIZE
1000
void*
heapindex[INDEX_SIZE];
//grabbing
the
address
and
size
of
the
global
memory
region
from
proc
void
init_global_range(){
char
file[100];
char
*
line=NULL;
size_t
n=0;
size_t
read_bytes=0;
size_t
start,
end;
sprintf(file,
"/proc/%d/maps",
getpid());
FILE
*
mapfile
=
fopen(file,
"r");
if
(mapfile==NULL){
perror("opening
maps
file
failed\n");
exit(-1);
}
int
counter=0;
while
((read_bytes
=
getline(&line,
&n,
mapfile))
!=
-1)
{
if
(strstr(line,
"hw4")!=NULL){
++counter;
if
(counter==3){
sscanf(line,
"%lx-%lx",
&start,
&end);
global_mem.start=(size_t*)start;
//
with
a
regular
address
space,
our
globals
spill
over
into
the
heap
global_mem.end=malloc(256);
free(global_mem.end);
}
}
else
if
(read_bytes
>
0
&&
counter==3)
{
if(strstr(line,"heap")==NULL)
{
//
with
a
randomized
address
space,
our
globals
spill
over
into
an
unnamed
segment
directly
following
the
globals
sscanf(line,
"%lx-%lx",
&start,
&end);
printf("found
an
extra
segment,
ending
at
%zx\n",end);
global_mem.end=(size_t*)end;
}
break;
}
}
fclose(mapfile);
}
//marking
related
operations
int
is_marked(size_t*
chunk)
{
return
((*chunk)
&
0x2)
>
0;
}
void
mark(size_t*
chunk)
{
(*chunk)|=0x2;
}
void
clear_mark(size_t*
chunk)
{
(*chunk)&=(~0x2);
}
//
chunk
related
operations
#define
chunk_size(c)
((*((size_t*)c))&
~(size_t)3
)
void*
next_chunk(void*
c)
{
if(chunk_size(c)
==
0)
{
printf("Panic,
chunk
is
of
zero
size.\n");
}
if((c+chunk_size(c))
<
sbrk(0))
return
((void*)c+chunk_size(c));
else
return
0;
}
int
in_use(void
*c)
{
return
(next_chunk(c)
&&
((*(size_t*)next_chunk(c))
&
1));
}
//
index
related
operations
#define
IND_INTERVAL
((sbrk(0)
-
(void*)(heap_mem.start
-
1))
/
INDEX_SIZE)
void
build_heap_index()
{
//
TODO
}
size_t
*
is_pointer(size_t
*
ptr)
{
size_t*
temp
=
heap_mem.start;
if(ptr
<=
heap_mem.start
||
ptr
>=
heap_mem.end){
//if
out
of
bounds,
return
null
return
NULL;
}
else{
while(temp
<
ptr){
//find
block
address
of
next
block
after
ptr
temp++;
}
temp--;//decrement
by
one
to
be
address
of
block
just
before
ptr
printf("%d
%d\n",
temp,
ptr);
if(in_use(ptr-sizeof(size_t))){
//if
block
is
allocated,
return
address
printf("in
use\n");
return
(ptr-sizeof(size_t));
}
else{
printf("aint
no
pointer\n");
return
NULL;
}
}
}
//
the
actual
collection
code
void
sweep()
{
size_t*
temp
=
heap_mem.start;
size_t*
end
=
sbrk(0);
while(temp
<
end){
//do
for
each
block
in
heap
if
(is_marked(*temp)){//if
root
reaches
it,
keep
it
clear_mark(*temp);
//unmark
to
prep
for
next
gc
stage
}
else
if
(in_use(temp)){//if
unmarked
but
alloced,
then
dealloc
free(*temp);
}
end
=
sbrk(0);//update
end
to
account
for
possibility
of
heap
boundary
changing
temp++;
}
return;
}
void
walk_region_and_mark(void*
start,
void*
end)
{
size_t*
temp
=
start;
size_t*
b;
//printf("%d
%d\n",
heap_mem.start,
sbrk(0));
while(temp
<
end){
//do
for
every
block
b
=
is_pointer(*temp);
if
(b){
//if
it's
not
a
ptr,
don't
do
anything
if
(is_marked(*b)){
printf("already
marked\n");
return;
};
//if
it's
already
marked,
don't
do
anything
mark(*b);
//it
can
reach
root,
so
mark
it
printf("pointer
marked\n");
/*for(int
i
=
0;
i
<
sizeof(size_t);
i++){
walk_region_and_mark(temp[i],
end);
//check
for
other
ptrs
in
block
}*/
}
//printf("%d\n",
temp);
temp++;
}
return;
}
//
standard
initialization
void
init_gc()
{
size_t
stack_var;
init_global_range();
heap_mem.start=malloc(512);
//since
the
heap
grows
down,
the
end
is
found
first
stack_mem.end=(size_t
*)&stack_var;
}
void
gc()
{
size_t
stack_var;
heap_mem.end=sbrk(0);
//grows
down,
so
start
is
a
lower
address
stack_mem.start=(size_t
*)&stack_var;
//
build
the
index
that
makes
determining
valid
ptrs
easier
//
implementing
this
smart
function
for
collecting
garbage
can
get
bonus;
//
if
you
can't
figure
it
out,
just
comment
out
this
function.
//
walk_region_and_mark
and
sweep
are
enough
for
this
project.
//build_heap_index();
//walk
memory
regions
walk_region_and_mark(global_mem.start,global_mem.end);
walk_region_and_mark(stack_mem.start,stack_mem.end);
//sweep();
}
